{"pages":[{"title":"About me","text":"Most of the example will be programmed in C#If any questions, please feel free to contact with me:williamyhhuang@gmail.com","link":"/about/index.html"}],"posts":[{"title":"[Design Pattern] Template Method 模式","text":"Template Method Pattern，顧名思義它就是一個模板，必須要在它指定的框架內完成實作。 所以要使用 Template Method Pattern，可以分為幾個步驟： 定義父類別抽象類型，也就是定義框架 子類別類型繼承父類別 子類別類型實作父類別的抽象方法 定義父類別抽象類型讓我們以「烹飪」當作範例，首先要定義烹飪會需要完成哪些步驟： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263/*Cooking.cs*/using System;namespace TemplateMethodPattern{ /// &lt;summary&gt; /// 烹飪 /// &lt;/summary&gt; public abstract class Cooking { /// &lt;summary&gt; /// 料理名稱 /// &lt;/summary&gt; public string _dishName; /// &lt;summary&gt; /// 建構子 /// &lt;/summary&gt; /// &lt;param name=&quot;dishName&quot;&gt;&lt;/param&gt; public Cooking(string dishName) { this._dishName = dishName; } /// &lt;summary&gt; /// 準備材料 /// &lt;/summary&gt; /// &lt;param name=&quot;dishName&quot;&gt;&lt;/param&gt; public abstract void Prepare(); /// &lt;summary&gt; /// 烹飪 /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public abstract void Cook(); /// &lt;summary&gt; /// 裝盤 /// &lt;/summary&gt; public void SetDish() { Console.WriteLine($&quot;{this._dishName}好了，可以上菜囉&quot;); } /// &lt;summary&gt; /// 完成 /// &lt;/summary&gt; public void Done() { Console.WriteLine(&quot;完成上菜，來整理廚房&quot;); this.CleanUp(); } /// &lt;summary&gt; /// 整理廚房 /// &lt;/summary&gt; private void CleanUp() { Console.WriteLine(&quot;廚房整理好了&quot;); } }} 實作父類別的抽象方法今天要做一道辣炒牛肉空心菜，我們建立一個子類別中式料理 ChineseDish，繼承父類別，並實作父類別的方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/*ChineseDish.cs*/using System;using System.Collections.Generic;namespace TemplateMethodPattern{ /// &lt;summary&gt; /// 中式料理 /// &lt;/summary&gt; public class ChineseDish : Cooking { /// &lt;summary&gt; /// 食材 /// &lt;/summary&gt; private List&lt;string&gt; _ingredients; /// &lt;summary&gt; /// 建構子 /// &lt;/summary&gt; /// &lt;param name=&quot;dishName&quot;&gt;&lt;/param&gt; public ChineseDish(string dishName) : base(dishName) { } //// 準備材料 public override void Prepare() { Console.WriteLine($&quot;今天要來做{this._dishName}&quot;); switch (this._dishName) { case &quot;辣炒牛肉空心菜&quot;: this._ingredients = new List&lt;string&gt; { &quot;辣椒&quot;, &quot;空心菜&quot;, &quot;牛肉&quot; }; break; } //// 洗菜 this.Clean(); //// 切菜 this.Cut(); Console.WriteLine(&quot;材料準備好了&quot;); } /// &lt;summary&gt; /// 烹飪 /// &lt;/summary&gt; public override void Cook() { Console.WriteLine(&quot;中式料理當然要用鍋炒，材料有:{0}&quot;, string.Join(&quot;，&quot;, this._ingredients)); Console.WriteLine(&quot;菜煮好了&quot;); } /// &lt;summary&gt; /// 洗菜 /// &lt;/summary&gt; private void Clean() { Console.WriteLine(&quot;菜洗好了&quot;); } /// &lt;summary&gt; /// 切菜 /// &lt;/summary&gt; private void Cut() { Console.WriteLine(&quot;菜切好了&quot;); } }} 最後來看看結果： 1234567891011121314151617181920/*Program.cs*/using System;using System.Collections.Generic;namespace TemplateMethodPattern{ class Program { static void Main(string[] args) { var dish = new ChineseDish(&quot;辣炒牛肉空心菜&quot;); dish.Prepare(); dish.Cook(); dish.SetDish(); dish.Done(); } }} 輸出結果如下： 123456789今天要來做辣炒牛肉空心菜菜洗好了菜切好了材料準備好了中式料理當然要用鍋炒，材料有:辣椒，空心菜，牛肉菜煮好了辣炒牛肉空心菜好了，可以上菜囉完成上菜，來整理廚房廚房整理好了 完整程式碼請參考 結論這樣就完成了我們的中式料理，也可以用相同的方式做其他類型的料理。你可以想像成 Template Method Pattern 就像是你看著食譜做菜，只要照著“食譜”這個框架完成即可。不過 Template Method Pattern 有一個缺點，如果我想同時製作中式料理跟西式料理，在建立新的中式類別及西式類別時，也建立了兩個一模一樣的 method： 12345678910111213141516171819202122/*Program.cs*/using System;using System.Collections.Generic;namespace TemplateMethodPattern{ class Program { static void Main(string[] args) { var chineseDish = new ChineseDish(&quot;辣炒牛肉空心菜&quot;); var westernDish = new WesternDish(&quot;威靈頓牛排&quot;); //// 兩個類別的 Done()、SetDish() method 一模一樣 chineseDish.SetDish(); westernDish.SetDish(); chineseDish.Done(); westernDish.Done(); } }} 且假若今天需要修改 Cooking 這個父類別，所有繼承 Cooking 的子類別都需要修改，如果只有一兩個還好，但如果有一兩百個呢？下一篇介紹的 Strategy Pattern 解決了這個問題。 參考TEMPLATE METHOD 模式和 STRATEGY 模式．無瑕的程式碼 敏捷完整篇：物件導向原則、設計模式與 C# 實踐Wiki - Template method pattern","link":"/2021/02/11/Template-Method-Pattern/"}],"tags":[{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"Design Pattern","slug":"Design-Pattern","link":"/tags/Design-Pattern/"}],"categories":[{"name":"Design Pattern","slug":"Design-Pattern","link":"/categories/Design-Pattern/"}]}